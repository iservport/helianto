Use Case: 1 - Simple User Registration

  Level <USER GOAL>

* Goal in Context: 

  Create an {{{apidocs/org/helianto/core/User.html}user}} account 
  and automatically attach to it:
  
  * authentication ({{{apidocs/org/helianto/core/Credential.html}credential}}) 
    information and {{{apidocs/org/helianto/core/PersonalData.html}personal data}},
    
  * a root {{{apidocs/org/helianto/core/Entity.html}entity}}, where 
    authorization rules will apply.

* Preconditions: 

  This use case presumes that the application will control a very small group of entities. This is 
  likely the case of a local application, running within the scope of an organization, not 
  enterprise applications defining division boudaries or sharing data along a supply-chain. For the
  latter, please, see the {{{entityuser.html}entity user}} use case.
  
  <Note that navigation accross entities is a complex issue. You should not need to split one entity
  in two or more unless any root domain object requires isolation. Root domain object examples are equipment,
  employees, parts, processes, etc.>
  
*------------------------------------------------------------------+
|At least one {{{apidocs/org/helianto/core/DefaultEntity.html}default entity}} must have been
|previously created, tipically during installation.
*------------------------------------------------------------------+

* Success Guarantee: 

  * the created {{{apidocs/org/helianto/core/User.html}user}} is in datastore,
  
  * knows his/her {{{apidocs/org/helianto/core/Credential.html}credential}}, and 
  
  * is associated with a {{{apidocs/org/helianto/core/DefaultEntity.html}default entity}}.
  
* Primary Actor: 

  A PERSON looking for user account registration.

* <<MAIN SUCCESS SCENARIO:>>

  * (1) the PERSON provides an unique name and basic personal data.
  
  * (2) the SYSTEM resolves to a default entity.
  
  * (3) the PERSON chooses and confirms a personal password.
  
  * (4) the SYSTEM acknowledges a successful registration.


** <<EXTENSIONS>>

  * (1.1) the supplied unique name is taken: the PERSON will try again or quit.
  
  * (2.1) the SYSTEM can't find a default entity: PERSON will be prompted to ask for 
    ADMINISTRATOR's assistence.
  
  * (3.1) the PERSON prefers to receive an e-mailed password: see {{{entityuser.html}entity user}} use case.
  
  * (4.1) the PERSON will update personal data: see the {{{userupdate.html}user update}} use case.


* <<SUB-VARIATIONS>>

  * none

* <RELATED INFORMATION>

  * Priority: see JIRA

  * Frequency: high.

  * Channel to primary actor: interactive.

* <OPEN ISSUES>

  * A console should be given to an ADMINISTRATOR with privileges to create a default entity at installation time.
  