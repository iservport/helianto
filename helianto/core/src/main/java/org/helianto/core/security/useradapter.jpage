    private static final long serialVersionUID = 6589522741174730225L;

    private static final Log logger = LogFactory.getLog(UserAdapter.class);
    
    private Credential credential;
    
    private User user;
    
    /**
     * Static method suitable to retrieve the <code>UserAdapter</code>
     * instance mantained in the <code>SecurityContext</code>.
     */
    public static PublicUserDetails retrievePublicUserDetailsFromSecurityContext() {
        if (logger.isDebugEnabled()) {
            logger.debug("\n         Retriving public user details ...");
        }
        PublicUserDetails pud = (PublicUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal(); 
        if (logger.isDebugEnabled()) {
            logger.debug("\n         Done.");
        }
        return pud;
    }
    
    private UserAdapter() { }
    
    /**
     * Minimal constructor.
     * @param credential A valid credential.
     */
    public UserAdapter(Credential credential) {
        this.credential = credential;
        this.refresh();
    }
    
    /**
     * If a <code>Credential</code> is connected
     * to a single <code>User</code>, take it.
     */
    private void refresh() {
        Set users = credential.getUsers();
        if (users!=null && users.size()==1) {
            user = (User) users.toArray()[0];
        }
    }

    public boolean isAccountNonExpired() {
        if (user!=null) {
            return user.isAccountNonExpired();
        }
        return true;
    }

    public boolean isAccountNonLocked() {
        if (user!=null) {
            return user.isAccountNonLocked();
        }
        return true;
    }

    public GrantedAuthority[] getAuthorities() {
        if (user!=null) {
            Set roles = user.getRoles();
            if (roles!=null && roles.size()>0) {
                if (logger.isDebugEnabled()) {
                    logger.debug("\n         Roles found: "+roles.size());
                }
                GrantedAuthority[] authorities = new GrantedAuthority[roles.size()];
                int i = 0;
                for (Iterator it = roles.iterator(); it.hasNext();) {
                    authorities[i++] =  new GrantedAuthorityImpl(((Role) it.next()).getRoleName());
                }
                return authorities;
            }
        }
        if (logger.isDebugEnabled()) {
            logger.debug("\n         No authorities found");
        }
        return new GrantedAuthority[] { new GrantedAuthorityImpl("") };
    }

    public boolean isCredentialsNonExpired() {
        //TODO implement control over expiration date
        if (credential.getExpired()==null) {
            return true;
        } 
        return true;
    }

    public boolean isEnabled() {
        if (credential.getCredentialState()==CredentialState.ACTIVE.getValue()) {
            return true;
        }
        if (credential.getCredentialState()==CredentialState.IDLE.getValue()) {
            return true;
        }
        return false;
    }

    public String getPassword() {
        return credential.getPassword();
    }

    public String getUsername() {
        return credential.getPrincipal();
    }
    
    public PersonalData getPersonalData() {
        return credential.getPersonalData();
    }
    
    @SuppressWarnings("unchecked")
    public Set getEntities() {
        Set<Entity> entities = new HashSet();
        if (credential.getUsers()!=null) {
            if (logger.isDebugEnabled()) {
                logger.debug("\n         Getting "+credential.getUsers().size()+" entity(ies).");
            }
            for (Iterator it = credential.getUsers().iterator();it.hasNext();) {
                Entity e = ((User)it.next()).getEntity();
                if (logger.isDebugEnabled()) {
                    logger.debug("\n         found "+e.toString());
                }
                entities.add(e);
            }
        } else {
            if (logger.isDebugEnabled()) {
                logger.debug("\n         No entity found with "+this.toString());
            }
        }
        return entities;
    }

    public Entity getCurrentEntity() {
        if (user!=null) {
            return user.getEntity();
        }
        return null;
    }
    
    public void setCurrentEntity(Entity entity) {
        if (credential.getUsers()!=null) {
            if (logger.isDebugEnabled()) {
                logger.debug("\n         Users found before entity is set: "+credential.getUsers().size());
            }
            for (Iterator it = credential.getUsers().iterator();it.hasNext();) {
                User u = (User)it.next(); 
                if (u.getEntity().getId().equals(entity.getId())) {
                    user = u;
                }
            }
        }
        if (logger.isDebugEnabled()) {
            logger.debug("\n         User id set by entity is "+user.getId());
        }
    }

